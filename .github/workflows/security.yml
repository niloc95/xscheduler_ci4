name: Security & Dependency Checks

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: |
          echo "## NPM Security Audit Results" > security-report.md
          echo "" >> security-report.md
          
          # Run audit and capture results
          if npm audit --audit-level=moderate; then
            echo "✅ No moderate or high vulnerabilities found" >> security-report.md
          else
            echo "⚠️ Vulnerabilities detected - see details below" >> security-report.md
            echo "" >> security-report.md
            echo "### Audit Output:" >> security-report.md
            echo "\`\`\`" >> security-report.md
            npm audit >> security-report.md || true
            echo "\`\`\`" >> security-report.md
          fi
          
      - name: Check for outdated packages
        run: |
          echo "" >> security-report.md
          echo "## Outdated Dependencies" >> security-report.md
          echo "" >> security-report.md
          echo "\`\`\`" >> security-report.md
          npm outdated >> security-report.md || echo "All packages are up to date" >> security-report.md
          echo "\`\`\`" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.sha }}
          path: security-report.md
          retention-days: 30
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-report.md')) {
              const report = fs.readFileSync('security-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Security Scan Results\n\n${report}`
              });
            }

  php-security-scan:
    name: PHP Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer:v2
          
      - name: Install Composer dependencies
        run: composer install --no-interaction
        
      - name: Check for PHP security advisories
        run: |
          echo "## PHP Security Check" > php-security-report.md
          echo "" >> php-security-report.md
          
          # Check if composer audit exists (Composer 2.4+)
          if composer audit --help > /dev/null 2>&1; then
            echo "Running composer audit..." >> php-security-report.md
            composer audit >> php-security-report.md || echo "No vulnerabilities found" >> php-security-report.md
          else
            echo "Composer audit not available, checking manually..." >> php-security-report.md
            echo "CodeIgniter version:" >> php-security-report.md
            composer show codeigniter4/framework >> php-security-report.md || echo "CodeIgniter not found in dependencies" >> php-security-report.md
          fi
          
      - name: Check file permissions
        run: |
          echo "" >> php-security-report.md
          echo "## File Permission Check" >> php-security-report.md
          echo "" >> php-security-report.md
          
          # Check for executable PHP files (potential security risk)
          EXEC_PHP=$(find . -name "*.php" -perm /u+x | grep -v vendor | head -10)
          if [ -n "$EXEC_PHP" ]; then
            echo "⚠️ Executable PHP files found:" >> php-security-report.md
            echo "\`\`\`" >> php-security-report.md
            echo "$EXEC_PHP" >> php-security-report.md
            echo "\`\`\`" >> php-security-report.md
          else
            echo "✅ No unexpected executable PHP files found" >> php-security-report.md
          fi
          
      - name: Check sensitive files
        run: |
          echo "" >> php-security-report.md
          echo "## Sensitive Files Check" >> php-security-report.md
          echo "" >> php-security-report.md
          
          # Check for accidentally committed sensitive files
          SENSITIVE_FILES=""
          for pattern in ".env" "*.key" "*.pem" "*password*" "*.secret"; do
            FILES=$(find . -name "$pattern" -not -path "./vendor/*" -not -path "./.git/*" | head -5)
            if [ -n "$FILES" ]; then
              SENSITIVE_FILES="$SENSITIVE_FILES\n$FILES"
            fi
          done
          
          if [ -n "$SENSITIVE_FILES" ]; then
            echo "⚠️ Potential sensitive files found:" >> php-security-report.md
            echo "\`\`\`" >> php-security-report.md
            echo -e "$SENSITIVE_FILES" >> php-security-report.md
            echo "\`\`\`" >> php-security-report.md
          else
            echo "✅ No sensitive files found in repository" >> php-security-report.md
          fi
          
      - name: Upload PHP security report
        uses: actions/upload-artifact@v4
        with:
          name: php-security-report-${{ github.sha }}
          path: php-security-report.md
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-ghsas: ""
          deny-licenses: "GPL-2.0, LGPL-2.1"
